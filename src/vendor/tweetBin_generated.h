// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TWEETBIN_H_
#define FLATBUFFERS_GENERATED_TWEETBIN_H_

#include "flatbuffers/flatbuffers.h"

struct Tweet;
struct TweetT;

struct TweetBin;
struct TweetBinT;

struct TweetT : public flatbuffers::NativeTable {
  typedef Tweet TableType;
  std::string text;
  std::string user;
  std::string date;
  std::string id;
  std::string committed;
  TweetT() {
  }
};

struct Tweet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TweetT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXT = 4,
    VT_USER = 6,
    VT_DATE = 8,
    VT_ID = 10,
    VT_COMMITTED = 12
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  const flatbuffers::String *user() const {
    return GetPointer<const flatbuffers::String *>(VT_USER);
  }
  const flatbuffers::String *date() const {
    return GetPointer<const flatbuffers::String *>(VT_DATE);
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *committed() const {
    return GetPointer<const flatbuffers::String *>(VT_COMMITTED);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           VerifyOffset(verifier, VT_USER) &&
           verifier.VerifyString(user()) &&
           VerifyOffset(verifier, VT_DATE) &&
           verifier.VerifyString(date()) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_COMMITTED) &&
           verifier.VerifyString(committed()) &&
           verifier.EndTable();
  }
  TweetT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TweetT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Tweet> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TweetT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TweetBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(Tweet::VT_TEXT, text);
  }
  void add_user(flatbuffers::Offset<flatbuffers::String> user) {
    fbb_.AddOffset(Tweet::VT_USER, user);
  }
  void add_date(flatbuffers::Offset<flatbuffers::String> date) {
    fbb_.AddOffset(Tweet::VT_DATE, date);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Tweet::VT_ID, id);
  }
  void add_committed(flatbuffers::Offset<flatbuffers::String> committed) {
    fbb_.AddOffset(Tweet::VT_COMMITTED, committed);
  }
  explicit TweetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TweetBuilder &operator=(const TweetBuilder &);
  flatbuffers::Offset<Tweet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Tweet>(end);
    return o;
  }
};

inline flatbuffers::Offset<Tweet> CreateTweet(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0,
    flatbuffers::Offset<flatbuffers::String> user = 0,
    flatbuffers::Offset<flatbuffers::String> date = 0,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> committed = 0) {
  TweetBuilder builder_(_fbb);
  builder_.add_committed(committed);
  builder_.add_id(id);
  builder_.add_date(date);
  builder_.add_user(user);
  builder_.add_text(text);
  return builder_.Finish();
}

inline flatbuffers::Offset<Tweet> CreateTweetDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr,
    const char *user = nullptr,
    const char *date = nullptr,
    const char *id = nullptr,
    const char *committed = nullptr) {
  return CreateTweet(
      _fbb,
      text ? _fbb.CreateString(text) : 0,
      user ? _fbb.CreateString(user) : 0,
      date ? _fbb.CreateString(date) : 0,
      id ? _fbb.CreateString(id) : 0,
      committed ? _fbb.CreateString(committed) : 0);
}

flatbuffers::Offset<Tweet> CreateTweet(flatbuffers::FlatBufferBuilder &_fbb, const TweetT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TweetBinT : public flatbuffers::NativeTable {
  typedef TweetBin TableType;
  std::vector<std::unique_ptr<TweetT>> tweets;
  TweetBinT() {
  }
};

struct TweetBin FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TweetBinT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TWEETS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Tweet>> *tweets() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Tweet>> *>(VT_TWEETS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TWEETS) &&
           verifier.VerifyVector(tweets()) &&
           verifier.VerifyVectorOfTables(tweets()) &&
           verifier.EndTable();
  }
  TweetBinT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TweetBinT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TweetBin> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TweetBinT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TweetBinBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_tweets(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Tweet>>> tweets) {
    fbb_.AddOffset(TweetBin::VT_TWEETS, tweets);
  }
  explicit TweetBinBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TweetBinBuilder &operator=(const TweetBinBuilder &);
  flatbuffers::Offset<TweetBin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TweetBin>(end);
    return o;
  }
};

inline flatbuffers::Offset<TweetBin> CreateTweetBin(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Tweet>>> tweets = 0) {
  TweetBinBuilder builder_(_fbb);
  builder_.add_tweets(tweets);
  return builder_.Finish();
}

inline flatbuffers::Offset<TweetBin> CreateTweetBinDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Tweet>> *tweets = nullptr) {
  return CreateTweetBin(
      _fbb,
      tweets ? _fbb.CreateVector<flatbuffers::Offset<Tweet>>(*tweets) : 0);
}

flatbuffers::Offset<TweetBin> CreateTweetBin(flatbuffers::FlatBufferBuilder &_fbb, const TweetBinT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TweetT *Tweet::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new TweetT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Tweet::UnPackTo(TweetT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = text(); if (_e) _o->text = _e->str(); };
  { auto _e = user(); if (_e) _o->user = _e->str(); };
  { auto _e = date(); if (_e) _o->date = _e->str(); };
  { auto _e = id(); if (_e) _o->id = _e->str(); };
  { auto _e = committed(); if (_e) _o->committed = _e->str(); };
}

inline flatbuffers::Offset<Tweet> Tweet::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TweetT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTweet(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Tweet> CreateTweet(flatbuffers::FlatBufferBuilder &_fbb, const TweetT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TweetT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _text = _o->text.empty() ? 0 : _fbb.CreateString(_o->text);
  auto _user = _o->user.empty() ? 0 : _fbb.CreateString(_o->user);
  auto _date = _o->date.empty() ? 0 : _fbb.CreateString(_o->date);
  auto _id = _o->id.empty() ? 0 : _fbb.CreateString(_o->id);
  auto _committed = _o->committed.empty() ? 0 : _fbb.CreateString(_o->committed);
  return CreateTweet(
      _fbb,
      _text,
      _user,
      _date,
      _id,
      _committed);
}

inline TweetBinT *TweetBin::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new TweetBinT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void TweetBin::UnPackTo(TweetBinT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = tweets(); if (_e) { _o->tweets.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->tweets[_i] = std::unique_ptr<TweetT>(_e->Get(_i)->UnPack(_resolver)); } } };
}

inline flatbuffers::Offset<TweetBin> TweetBin::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TweetBinT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTweetBin(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TweetBin> CreateTweetBin(flatbuffers::FlatBufferBuilder &_fbb, const TweetBinT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TweetBinT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _tweets = _o->tweets.size() ? _fbb.CreateVector<flatbuffers::Offset<Tweet>> (_o->tweets.size(), [](size_t i, _VectorArgs *__va) { return CreateTweet(*__va->__fbb, __va->__o->tweets[i].get(), __va->__rehasher); }, &_va ) : 0;
  return CreateTweetBin(
      _fbb,
      _tweets);
}

#endif  // FLATBUFFERS_GENERATED_TWEETBIN_H_
